import { __decorate } from "tslib";
import { Component } from '@angular/core';
import { NgxLoaderSpinnerService } from './ngx-loader-spinner.service';
var NgxLoaderSpinnerComponent = /** @class */ (function () {
    function NgxLoaderSpinnerComponent(loader) {
        this.loader = loader;
        /**
         * Loader flag
         */
        this.isLoading = false;
    }
    NgxLoaderSpinnerComponent.prototype.ngOnInit = function () {
        this.getLoaderStatus();
    };
    /**
     * Get loader status
     */
    NgxLoaderSpinnerComponent.prototype.getLoaderStatus = function () {
        var _this = this;
        this.loader
            .loaderStatus()
            .subscribe(function (spinning) {
            setTimeout(function () {
                _this.isLoading = spinning;
            }, 10);
        });
    };
    NgxLoaderSpinnerComponent.ctorParameters = function () { return [
        { type: NgxLoaderSpinnerService }
    ]; };
    NgxLoaderSpinnerComponent = __decorate([
        Component({
            selector: 'ngx-loader-spinner',
            template: "\n  <div *ngIf=\"isLoading\" class=\"loader-wrapper\">\n    <div class=\"loader\">\n      <div class=\"item1\"></div>\n      <div class=\"item2\"></div>\n      <div class=\"item3\"></div>\n    </div>\n  </div>\n  ",
            styles: ["\n    .loader-wrapper {\n      height: 100vh;\n      width: 100vw;\n      background-color: rgba(255, 255, 255, 0.7);\n      position: fixed;\n      z-index: 999;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n    .loader > div {\n      width: 18px;\n      height: 18px;\n      background-color: #d35400;\n      border-radius: 100%;\n      display: inline-block;\n      -webkit-animation: sk-bouncedelay 1.4s infinite ease-in-out both;\n      animation: sk-bouncedelay 1.4s infinite ease-in-out both;\n    }\n    .loader .item1 {\n      -webkit-animation-delay: -0.32s;\n      animation-delay: -0.32s;\n    }\n    .loader .item2 {\n      -webkit-animation-delay: -0.16s;\n      animation-delay: -0.16s;\n    }\n\n    @-webkit-keyframes sk-bouncedelay {\n      0%, 80%, 100% { -webkit-transform: scale(0) }\n      40% { -webkit-transform: scale(1.0) }\n    }\n\n    @keyframes sk-bouncedelay {\n      0%, 80%, 100% {\n        -webkit-transform: scale(0);\n        transform: scale(0);\n      } 40% {\n        -webkit-transform: scale(1.0);\n        transform: scale(1.0);\n      }\n    }\n  "]
        })
    ], NgxLoaderSpinnerComponent);
    return NgxLoaderSpinnerComponent;
}());
export { NgxLoaderSpinnerComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWxvYWRlci1zcGlubmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1sb2FkZXItc3Bpbm5lci8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtbG9hZGVyLXNwaW5uZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ2xELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBK0R2RTtJQU9FLG1DQUNVLE1BQStCO1FBQS9CLFdBQU0sR0FBTixNQUFNLENBQXlCO1FBTnpDOztXQUVHO1FBQ0gsY0FBUyxHQUFHLEtBQUssQ0FBQztJQUlkLENBQUM7SUFFTCw0Q0FBUSxHQUFSO1FBQ0UsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7T0FFRztJQUNLLG1EQUFlLEdBQXZCO1FBQUEsaUJBUUM7UUFQQyxJQUFJLENBQUMsTUFBTTthQUNOLFlBQVksRUFBRTthQUNkLFNBQVMsQ0FBQyxVQUFBLFFBQVE7WUFDakIsVUFBVSxDQUFDO2dCQUNULEtBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO1lBQzVCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNULENBQUMsQ0FBQyxDQUFDO0lBQ1QsQ0FBQzs7Z0JBbEJpQix1QkFBdUI7O0lBUjlCLHlCQUF5QjtRQTdEckMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLG9CQUFvQjtZQUM5QixRQUFRLEVBQUUsdU5BUVQ7cUJBQ1EsaXJDQStDUjtTQUNGLENBQUM7T0FFVyx5QkFBeUIsQ0E0QnJDO0lBQUQsZ0NBQUM7Q0FBQSxBQTVCRCxJQTRCQztTQTVCWSx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmd4TG9hZGVyU3Bpbm5lclNlcnZpY2UgfSBmcm9tICcuL25neC1sb2FkZXItc3Bpbm5lci5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmd4LWxvYWRlci1zcGlubmVyJyxcbiAgdGVtcGxhdGU6IGBcbiAgPGRpdiAqbmdJZj1cImlzTG9hZGluZ1wiIGNsYXNzPVwibG9hZGVyLXdyYXBwZXJcIj5cbiAgICA8ZGl2IGNsYXNzPVwibG9hZGVyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiaXRlbTFcIj48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJpdGVtMlwiPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIml0ZW0zXCI+PC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuICBgLFxuICBzdHlsZXM6IFtgXG4gICAgLmxvYWRlci13cmFwcGVyIHtcbiAgICAgIGhlaWdodDogMTAwdmg7XG4gICAgICB3aWR0aDogMTAwdnc7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyk7XG4gICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICB6LWluZGV4OiA5OTk7XG4gICAgICB0b3A6IDA7XG4gICAgICBsZWZ0OiAwO1xuICAgICAgcmlnaHQ6IDA7XG4gICAgICBib3R0b206IDA7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIH1cbiAgICAubG9hZGVyID4gZGl2IHtcbiAgICAgIHdpZHRoOiAxOHB4O1xuICAgICAgaGVpZ2h0OiAxOHB4O1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2QzNTQwMDtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDEwMCU7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAtd2Via2l0LWFuaW1hdGlvbjogc2stYm91bmNlZGVsYXkgMS40cyBpbmZpbml0ZSBlYXNlLWluLW91dCBib3RoO1xuICAgICAgYW5pbWF0aW9uOiBzay1ib3VuY2VkZWxheSAxLjRzIGluZmluaXRlIGVhc2UtaW4tb3V0IGJvdGg7XG4gICAgfVxuICAgIC5sb2FkZXIgLml0ZW0xIHtcbiAgICAgIC13ZWJraXQtYW5pbWF0aW9uLWRlbGF5OiAtMC4zMnM7XG4gICAgICBhbmltYXRpb24tZGVsYXk6IC0wLjMycztcbiAgICB9XG4gICAgLmxvYWRlciAuaXRlbTIge1xuICAgICAgLXdlYmtpdC1hbmltYXRpb24tZGVsYXk6IC0wLjE2cztcbiAgICAgIGFuaW1hdGlvbi1kZWxheTogLTAuMTZzO1xuICAgIH1cblxuICAgIEAtd2Via2l0LWtleWZyYW1lcyBzay1ib3VuY2VkZWxheSB7XG4gICAgICAwJSwgODAlLCAxMDAlIHsgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDApIH1cbiAgICAgIDQwJSB7IC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLjApIH1cbiAgICB9XG5cbiAgICBAa2V5ZnJhbWVzIHNrLWJvdW5jZWRlbGF5IHtcbiAgICAgIDAlLCA4MCUsIDEwMCUge1xuICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMCk7XG4gICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMCk7XG4gICAgICB9IDQwJSB7XG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLjApO1xuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMCk7XG4gICAgICB9XG4gICAgfVxuICBgXVxufSlcblxuZXhwb3J0IGNsYXNzIE5neExvYWRlclNwaW5uZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIC8qKlxuICAgKiBMb2FkZXIgZmxhZ1xuICAgKi9cbiAgaXNMb2FkaW5nID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBsb2FkZXI6IE5neExvYWRlclNwaW5uZXJTZXJ2aWNlXG4gICkgeyB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5nZXRMb2FkZXJTdGF0dXMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgbG9hZGVyIHN0YXR1c1xuICAgKi9cbiAgcHJpdmF0ZSBnZXRMb2FkZXJTdGF0dXMoKSB7XG4gICAgdGhpcy5sb2FkZXJcbiAgICAgICAgLmxvYWRlclN0YXR1cygpXG4gICAgICAgIC5zdWJzY3JpYmUoc3Bpbm5pbmcgPT4ge1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSBzcGlubmluZztcbiAgICAgICAgICB9LCAxMCk7XG4gICAgICAgIH0pO1xuICB9XG5cbn1cbiJdfQ==