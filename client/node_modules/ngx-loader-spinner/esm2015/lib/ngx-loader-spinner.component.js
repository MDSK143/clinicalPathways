import { __decorate } from "tslib";
import { Component } from '@angular/core';
import { NgxLoaderSpinnerService } from './ngx-loader-spinner.service';
let NgxLoaderSpinnerComponent = class NgxLoaderSpinnerComponent {
    constructor(loader) {
        this.loader = loader;
        /**
         * Loader flag
         */
        this.isLoading = false;
    }
    ngOnInit() {
        this.getLoaderStatus();
    }
    /**
     * Get loader status
     */
    getLoaderStatus() {
        this.loader
            .loaderStatus()
            .subscribe(spinning => {
            setTimeout(() => {
                this.isLoading = spinning;
            }, 10);
        });
    }
};
NgxLoaderSpinnerComponent.ctorParameters = () => [
    { type: NgxLoaderSpinnerService }
];
NgxLoaderSpinnerComponent = __decorate([
    Component({
        selector: 'ngx-loader-spinner',
        template: `
  <div *ngIf="isLoading" class="loader-wrapper">
    <div class="loader">
      <div class="item1"></div>
      <div class="item2"></div>
      <div class="item3"></div>
    </div>
  </div>
  `,
        styles: [`
    .loader-wrapper {
      height: 100vh;
      width: 100vw;
      background-color: rgba(255, 255, 255, 0.7);
      position: fixed;
      z-index: 999;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .loader > div {
      width: 18px;
      height: 18px;
      background-color: #d35400;
      border-radius: 100%;
      display: inline-block;
      -webkit-animation: sk-bouncedelay 1.4s infinite ease-in-out both;
      animation: sk-bouncedelay 1.4s infinite ease-in-out both;
    }
    .loader .item1 {
      -webkit-animation-delay: -0.32s;
      animation-delay: -0.32s;
    }
    .loader .item2 {
      -webkit-animation-delay: -0.16s;
      animation-delay: -0.16s;
    }

    @-webkit-keyframes sk-bouncedelay {
      0%, 80%, 100% { -webkit-transform: scale(0) }
      40% { -webkit-transform: scale(1.0) }
    }

    @keyframes sk-bouncedelay {
      0%, 80%, 100% {
        -webkit-transform: scale(0);
        transform: scale(0);
      } 40% {
        -webkit-transform: scale(1.0);
        transform: scale(1.0);
      }
    }
  `]
    })
], NgxLoaderSpinnerComponent);
export { NgxLoaderSpinnerComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWxvYWRlci1zcGlubmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1sb2FkZXItc3Bpbm5lci8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtbG9hZGVyLXNwaW5uZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ2xELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBK0R2RSxJQUFhLHlCQUF5QixHQUF0QyxNQUFhLHlCQUF5QjtJQU9wQyxZQUNVLE1BQStCO1FBQS9CLFdBQU0sR0FBTixNQUFNLENBQXlCO1FBTnpDOztXQUVHO1FBQ0gsY0FBUyxHQUFHLEtBQUssQ0FBQztJQUlkLENBQUM7SUFFTCxRQUFRO1FBQ04sSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7T0FFRztJQUNLLGVBQWU7UUFDckIsSUFBSSxDQUFDLE1BQU07YUFDTixZQUFZLEVBQUU7YUFDZCxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDcEIsVUFBVSxDQUFDLEdBQUcsRUFBRTtnQkFDZCxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztZQUM1QixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDVCxDQUFDLENBQUMsQ0FBQztJQUNULENBQUM7Q0FFRixDQUFBOztZQXBCbUIsdUJBQXVCOztBQVI5Qix5QkFBeUI7SUE3RHJDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxvQkFBb0I7UUFDOUIsUUFBUSxFQUFFOzs7Ozs7OztHQVFUO2lCQUNROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQStDUjtLQUNGLENBQUM7R0FFVyx5QkFBeUIsQ0E0QnJDO1NBNUJZLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ3hMb2FkZXJTcGlubmVyU2VydmljZSB9IGZyb20gJy4vbmd4LWxvYWRlci1zcGlubmVyLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ3gtbG9hZGVyLXNwaW5uZXInLFxuICB0ZW1wbGF0ZTogYFxuICA8ZGl2ICpuZ0lmPVwiaXNMb2FkaW5nXCIgY2xhc3M9XCJsb2FkZXItd3JhcHBlclwiPlxuICAgIDxkaXYgY2xhc3M9XCJsb2FkZXJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJpdGVtMVwiPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIml0ZW0yXCI+PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiaXRlbTNcIj48L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG4gIGAsXG4gIHN0eWxlczogW2BcbiAgICAubG9hZGVyLXdyYXBwZXIge1xuICAgICAgaGVpZ2h0OiAxMDB2aDtcbiAgICAgIHdpZHRoOiAxMDB2dztcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43KTtcbiAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgIHotaW5kZXg6IDk5OTtcbiAgICAgIHRvcDogMDtcbiAgICAgIGxlZnQ6IDA7XG4gICAgICByaWdodDogMDtcbiAgICAgIGJvdHRvbTogMDtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgfVxuICAgIC5sb2FkZXIgPiBkaXYge1xuICAgICAgd2lkdGg6IDE4cHg7XG4gICAgICBoZWlnaHQ6IDE4cHg7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDM1NDAwO1xuICAgICAgYm9yZGVyLXJhZGl1czogMTAwJTtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIC13ZWJraXQtYW5pbWF0aW9uOiBzay1ib3VuY2VkZWxheSAxLjRzIGluZmluaXRlIGVhc2UtaW4tb3V0IGJvdGg7XG4gICAgICBhbmltYXRpb246IHNrLWJvdW5jZWRlbGF5IDEuNHMgaW5maW5pdGUgZWFzZS1pbi1vdXQgYm90aDtcbiAgICB9XG4gICAgLmxvYWRlciAuaXRlbTEge1xuICAgICAgLXdlYmtpdC1hbmltYXRpb24tZGVsYXk6IC0wLjMycztcbiAgICAgIGFuaW1hdGlvbi1kZWxheTogLTAuMzJzO1xuICAgIH1cbiAgICAubG9hZGVyIC5pdGVtMiB7XG4gICAgICAtd2Via2l0LWFuaW1hdGlvbi1kZWxheTogLTAuMTZzO1xuICAgICAgYW5pbWF0aW9uLWRlbGF5OiAtMC4xNnM7XG4gICAgfVxuXG4gICAgQC13ZWJraXQta2V5ZnJhbWVzIHNrLWJvdW5jZWRlbGF5IHtcbiAgICAgIDAlLCA4MCUsIDEwMCUgeyAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMCkgfVxuICAgICAgNDAlIHsgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEuMCkgfVxuICAgIH1cblxuICAgIEBrZXlmcmFtZXMgc2stYm91bmNlZGVsYXkge1xuICAgICAgMCUsIDgwJSwgMTAwJSB7XG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgwKTtcbiAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwKTtcbiAgICAgIH0gNDAlIHtcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEuMCk7XG4gICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMS4wKTtcbiAgICAgIH1cbiAgICB9XG4gIGBdXG59KVxuXG5leHBvcnQgY2xhc3MgTmd4TG9hZGVyU3Bpbm5lckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgLyoqXG4gICAqIExvYWRlciBmbGFnXG4gICAqL1xuICBpc0xvYWRpbmcgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGxvYWRlcjogTmd4TG9hZGVyU3Bpbm5lclNlcnZpY2VcbiAgKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmdldExvYWRlclN0YXR1cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBsb2FkZXIgc3RhdHVzXG4gICAqL1xuICBwcml2YXRlIGdldExvYWRlclN0YXR1cygpIHtcbiAgICB0aGlzLmxvYWRlclxuICAgICAgICAubG9hZGVyU3RhdHVzKClcbiAgICAgICAgLnN1YnNjcmliZShzcGlubmluZyA9PiB7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IHNwaW5uaW5nO1xuICAgICAgICAgIH0sIDEwKTtcbiAgICAgICAgfSk7XG4gIH1cblxufVxuIl19