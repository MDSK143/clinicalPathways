{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet AccountComponent = class AccountComponent {\n  constructor(spinnerService, userService) {\n    this.spinnerService = spinnerService;\n    this.userService = userService;\n    this.fullName = '';\n    this.emailId = '';\n    this.accountForm = new FormGroup({\n      firstName: new FormControl(null, [Validators.required]),\n      lastName: new FormControl(null, [Validators.required]),\n      mobile: new FormControl(null, [Validators.required]),\n      emailId: new FormControl(null, [Validators.required])\n    });\n    this.errorMessageOnUpdateUser = '';\n    this.successMessageOnUpdateUser = '';\n    this.alertHeadingOnUpdateUser = '';\n    this.successOnUpdateUser = false;\n    this.onLoadOnUpdateUser = true;\n  }\n  ngOnInit() {\n    this.getUserByQuery();\n  }\n  getUserByQuery() {\n    this.spinnerService.show();\n    try {\n      this.userService.getUserbyQuery(`_id=${localStorage.getItem('userId')}`).subscribe(response => {\n        console.log(`User Data: ${JSON.stringify(response)}`);\n        this.accountForm.patchValue({\n          firstName: response.body[0].firstName,\n          lastName: response.body[0].lastName,\n          emailId: response.body[0].emailId,\n          mobile: response.body[0].mobile\n        });\n        this.fullName = response.body[0].firstName + ' ' + response.body[0].lastName;\n        this.emailId = response.body[0].emailId;\n      }, err => {\n        console.error(`Error [getUser]:  , ${JSON.stringify(err.error)}`);\n        this.spinnerService.hide();\n      });\n    } catch (err) {\n      console.error(`Error [getUser]:  , ${JSON.stringify(err)}`);\n      this.spinnerService.hide();\n    }\n  }\n  updateUser() {\n    this.onLoadOnUpdateUser = false;\n    this.spinnerService.show();\n    try {\n      this.userService.updateUser(this.accountForm.value).subscribe(response => {\n        this.successOnUpdateUser = true;\n        this.alertHeadingOnUpdateUser = response.message;\n        setTimeout(() => {\n          this.spinnerService.hide();\n        }, 1500);\n      }, err => {\n        console.error(`Error [saveUser]:  , ${JSON.stringify(err.error)}`);\n        this.alertHeadingOnUpdateUser = err.error.message;\n        this.errorMessageOnUpdateUser = err.error.body;\n        this.spinnerService.hide();\n      });\n    } catch (err) {\n      console.error(`Error [saveUser]:  , ${JSON.stringify(err)}`);\n      this.alertHeadingOnUpdateUser = err.error.message;\n      this.errorMessageOnUpdateUser = err.error.body;\n      this.spinnerService.hide();\n    }\n  }\n};\nAccountComponent = __decorate([Component({\n  selector: 'app-account',\n  templateUrl: './account.component.html',\n  styleUrls: ['./account.component.css']\n})], AccountComponent);\nexport { AccountComponent };","map":{"version":3,"mappings":"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","names":["Component","FormControl","FormGroup","Validators","AccountComponent","constructor","spinnerService","userService","firstName","required","lastName","mobile","emailId","ngOnInit","getUserByQuery","show","getUserbyQuery","localStorage","getItem","subscribe","response","console","log","JSON","stringify","accountForm","patchValue","body","fullName","err","error","hide","updateUser","onLoadOnUpdateUser","value","successOnUpdateUser","alertHeadingOnUpdateUser","message","setTimeout","errorMessageOnUpdateUser","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\LENOVO\\Desktop\\clinicalPathways-angular\\client\\src\\components\\account\\account.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { NgxLoaderSpinnerService } from 'ngx-loader-spinner';\nimport { UserService } from 'src/services/user.service';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-account',\n  templateUrl: './account.component.html',\n  styleUrls: ['./account.component.css'],\n})\nexport class AccountComponent {\n  fullName: string = '';\n  emailId: any = '';\n\n  constructor(\n    private spinnerService: NgxLoaderSpinnerService,\n    private userService: UserService\n  ) {}\n\n  accountForm = new FormGroup({\n    firstName: new FormControl(null, [Validators.required]),\n    lastName: new FormControl(null, [Validators.required]),\n    mobile: new FormControl(null, [Validators.required]),\n    emailId: new FormControl(null, [Validators.required]),\n  });\n\n  errorMessageOnUpdateUser: string = '';\n  successMessageOnUpdateUser: string = '';\n  alertHeadingOnUpdateUser: string = '';\n  successOnUpdateUser: boolean = false;\n  onLoadOnUpdateUser: boolean = true;\n\n  ngOnInit() {\n    this.getUserByQuery();\n  }\n\n  getUserByQuery() {\n    this.spinnerService.show();\n    try {\n      this.userService\n        .getUserbyQuery(`_id=${localStorage.getItem('userId')}`)\n        .subscribe(\n          (response: any) => {\n            console.log(`User Data: ${JSON.stringify(response)}`);\n            this.accountForm.patchValue({\n              firstName: response.body[0].firstName,\n              lastName: response.body[0].lastName,\n              emailId: response.body[0].emailId,\n              mobile: response.body[0].mobile,\n            });\n            this.fullName =\n              response.body[0].firstName + ' ' + response.body[0].lastName;\n            this.emailId = response.body[0].emailId;\n          },\n          (err: any) => {\n            console.error(`Error [getUser]:  , ${JSON.stringify(err.error)}`);\n            this.spinnerService.hide();\n          }\n        );\n    } catch (err: any) {\n      console.error(`Error [getUser]:  , ${JSON.stringify(err)}`);\n      this.spinnerService.hide();\n    }\n  }\n\n  updateUser() {\n    this.onLoadOnUpdateUser = false;\n    this.spinnerService.show();\n    try {\n      this.userService.updateUser(this.accountForm.value).subscribe(\n        (response: any) => {\n          this.successOnUpdateUser = true;\n          this.alertHeadingOnUpdateUser = response.message;\n          setTimeout(() => {\n            this.spinnerService.hide();\n          }, 1500);\n        },\n        (err: any) => {\n          console.error(`Error [saveUser]:  , ${JSON.stringify(err.error)}`);\n          this.alertHeadingOnUpdateUser = err.error.message;\n          this.errorMessageOnUpdateUser = err.error.body;\n          this.spinnerService.hide();\n        }\n      );\n    } catch (err: any) {\n      console.error(`Error [saveUser]:  , ${JSON.stringify(err)}`);\n      this.alertHeadingOnUpdateUser = err.error.message;\n      this.errorMessageOnUpdateUser = err.error.body;\n      this.spinnerService.hide();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}