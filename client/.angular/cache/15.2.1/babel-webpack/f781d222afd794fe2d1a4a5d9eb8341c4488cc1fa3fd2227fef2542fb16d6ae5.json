{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet DashboardComponent = class DashboardComponent {\n  constructor(router, userService) {\n    this.router = router;\n    this.userService = userService;\n    this.loginForm = new FormGroup({\n      userName: new FormControl(null, [Validators.required]),\n      password: new FormControl(null, [Validators.required])\n    });\n    this.signUpForm = new FormGroup({\n      firstName: new FormControl(null, [Validators.required]),\n      lastName: new FormControl(null, [Validators.required]),\n      mobile: new FormControl(null, [Validators.required]),\n      emailId: new FormControl(null, [Validators.required]),\n      userName: new FormControl(null, [Validators.required]),\n      password: new FormControl(null, [Validators.required]),\n      confirmPassword: new FormControl(null, [Validators.required])\n    });\n    this.errorMessage = '';\n    this.successMessage = '';\n  }\n  ngOnInit() {}\n  // login\n  login() {\n    try {\n      this.userService.login(this.loginForm.value).subscribe(response => {\n        alert('Login');\n        this.successMessage = response.message;\n        $('#loginModal').modal('hide');\n        this.router.navigate(['/inner-dashboard']);\n      }, err => {\n        console.error(`Error [saveUser]:  , ${JSON.stringify(err.error)}`);\n        this.errorMessage = err.error.message;\n      });\n    } catch (err) {\n      console.error(`Error [saveUser]:  , ${JSON.stringify(err)}`);\n      // this.toastr.error(`${err ? err : 'Internal Server Error'}`, 'Error');\n    }\n  }\n};\n\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})], DashboardComponent);\nexport { DashboardComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAASC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AAU5D,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAC7BC,YAAoBC,MAAc,EAAUC,WAAwB;IAAhD,WAAM,GAAND,MAAM;IAAkB,gBAAW,GAAXC,WAAW;IAEvD,cAAS,GAAG,IAAIL,SAAS,CAAC;MACxBM,QAAQ,EAAE,IAAIP,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACM,QAAQ,CAAC,CAAC;MACtDC,QAAQ,EAAE,IAAIT,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACM,QAAQ,CAAC;KACtD,CAAC;IAEF,eAAU,GAAG,IAAIP,SAAS,CAAC;MACzBS,SAAS,EAAE,IAAIV,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACM,QAAQ,CAAC,CAAC;MACvDG,QAAQ,EAAE,IAAIX,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACM,QAAQ,CAAC,CAAC;MACtDI,MAAM,EAAE,IAAIZ,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACM,QAAQ,CAAC,CAAC;MACpDK,OAAO,EAAE,IAAIb,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACM,QAAQ,CAAC,CAAC;MACrDD,QAAQ,EAAE,IAAIP,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACM,QAAQ,CAAC,CAAC;MACtDC,QAAQ,EAAE,IAAIT,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACM,QAAQ,CAAC,CAAC;MACtDM,eAAe,EAAE,IAAId,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACM,QAAQ,CAAC;KAC7D,CAAC;IAEF,iBAAY,GAAW,EAAE;IACzB,mBAAc,GAAW,EAAE;EAlB4C;EAoBvEO,QAAQ,IAAU;EAElB;EACAC,KAAK;IACH,IAAI;MACF,IAAI,CAACV,WAAW,CAACU,KAAK,CAAC,IAAI,CAACC,SAAS,CAACC,KAAK,CAAC,CAACC,SAAS,CACnDC,QAAa,IAAI;QAChBC,KAAK,CAAC,OAAO,CAAC;QACd,IAAI,CAACC,cAAc,GAAGF,QAAQ,CAACG,OAAO;QACtCC,CAAC,CAAC,aAAa,CAAC,CAACC,KAAK,CAAC,MAAM,CAAC;QAC9B,IAAI,CAACpB,MAAM,CAACqB,QAAQ,CAAC,CAAC,kBAAkB,CAAC,CAAC;MAC5C,CAAC,EACAC,GAAQ,IAAI;QACXC,OAAO,CAACC,KAAK,CAAC,wBAAwBC,IAAI,CAACC,SAAS,CAACJ,GAAG,CAACE,KAAK,CAAC,EAAE,CAAC;QAClE,IAAI,CAACG,YAAY,GAAGL,GAAG,CAACE,KAAK,CAACN,OAAO;MACvC,CAAC,CACF;KACF,CAAC,OAAOI,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,wBAAwBC,IAAI,CAACC,SAAS,CAACJ,GAAG,CAAC,EAAE,CAAC;MAC5D;;EAEJ;CACD;;AA3CYxB,kBAAkB,eAL9BJ,SAAS,CAAC;EACTkC,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,GACWhC,kBAAkB,CA2C9B;SA3CYA,kBAAkB","names":["Component","FormControl","FormGroup","Validators","DashboardComponent","constructor","router","userService","userName","required","password","firstName","lastName","mobile","emailId","confirmPassword","ngOnInit","login","loginForm","value","subscribe","response","alert","successMessage","message","$","modal","navigate","err","console","error","JSON","stringify","errorMessage","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\LENOVO\\Desktop\\clinicalPathways-angular\\client\\src\\components\\dashboard\\dashboard.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { UserService } from 'src/services/user.service';\ndeclare var $: any;\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css'],\n})\nexport class DashboardComponent {\n  constructor(private router: Router, private userService: UserService) {}\n\n  loginForm = new FormGroup({\n    userName: new FormControl(null, [Validators.required]),\n    password: new FormControl(null, [Validators.required]),\n  });\n\n  signUpForm = new FormGroup({\n    firstName: new FormControl(null, [Validators.required]),\n    lastName: new FormControl(null, [Validators.required]),\n    mobile: new FormControl(null, [Validators.required]),\n    emailId: new FormControl(null, [Validators.required]),\n    userName: new FormControl(null, [Validators.required]),\n    password: new FormControl(null, [Validators.required]),\n    confirmPassword: new FormControl(null, [Validators.required]),\n  });\n\n  errorMessage: string = '';\n  successMessage: string = '';\n\n  ngOnInit(): void {}\n\n  // login\n  login() {\n    try {\n      this.userService.login(this.loginForm.value).subscribe(\n        (response: any) => {\n          alert('Login');\n          this.successMessage = response.message;\n          $('#loginModal').modal('hide');\n          this.router.navigate(['/inner-dashboard']);\n        },\n        (err: any) => {\n          console.error(`Error [saveUser]:  , ${JSON.stringify(err.error)}`);\n          this.errorMessage = err.error.message;\n        }\n      );\n    } catch (err) {\n      console.error(`Error [saveUser]:  , ${JSON.stringify(err)}`);\n      // this.toastr.error(`${err ? err : 'Internal Server Error'}`, 'Error');\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}