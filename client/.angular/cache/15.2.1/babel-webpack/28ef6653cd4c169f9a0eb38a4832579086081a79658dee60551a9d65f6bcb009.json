{"ast":null,"code":"import { take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./user.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(userService, router) {\n    this.userService = userService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    // alert(this.userService.isAuthenticated);\n    // if (this.userService.isAuthenticated) return true;\n    // else {\n    //   this.router.navigate(['/']);\n    //   return false;\n    // }\n    return this.userService.isAuthenticated.pipe(take(1));\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.UserService), i0.ɵɵinject(i2.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac\n});","map":{"version":3,"mappings":"AAUA,SAASA,IAAI,QAAkB,gBAAgB;;;;AAG/C,OAAM,MAAOC,SAAS;EACpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EACvEC,WAAW,CAACC,KAA6B,EACvCC,KAA0B;IAE1B;IACA;IACA;IACA;IACA;IACA;IACA,OAAO,IAAI,CAACJ,WAAW,CAACK,eAAe,CAACC,IAAI,CAACT,IAAI,CAAC,CAAC,CAAC,CAAC;EACvD;;AAZWC,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAS,SAATT,SAAS;AAAA","names":["take","AuthGuard","constructor","userService","router","canActivate","route","state","isAuthenticated","pipe","factory"],"sourceRoot":"","sources":["C:\\Users\\LENOVO\\Desktop\\clinicalPathways-angular\\client\\src\\services\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree,\n  Router,\n} from '@angular/router';\nimport { UserService } from './user.service';\nimport { Observable } from 'rxjs';\nimport { take, map, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private userService: UserService, private router: Router) {}\n  canActivate(route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable {\n    // alert(this.userService.isAuthenticated);\n    // if (this.userService.isAuthenticated) return true;\n    // else {\n    //   this.router.navigate(['/']);\n    //   return false;\n    // }\n    return this.userService.isAuthenticated.pipe(take(1));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}